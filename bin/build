#!/bin/bash
root_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
options=`cat ${root_dir}/bin/config_options.sh`
host=$(${root_dir}/bin/variables.sh host) || exit -1
depends_dir=$($root_dir/bin/variables.sh depends_dir)
btc_dir="${root_dir}/libbitcoind"
sys=$($root_dir/bin/variables.sh sys)
config_lib_dir=$($root_dir/bin/variables.sh config_lib_dir)
export CPPFLAGS="-I${depends_dir}/${host}/include/boost -I${depends_dir}/${host}/include -L${depends_dir}/${host}/lib"
echo "Using BTC directory: ${btc_dir}"

cd "${root_dir}" || exit -1

build_dependencies () {
  if [ -d "${btc_dir}" ]; then
    pushd "${depends_dir}" || exit -1
    echo "using host for dependencies: ${host}"
    if [ "${test}" = true ]; then
      make HOST=${host} NO_QT=1 NO_UPNP=1
    else
      make HOST=${host} NO_QT=1 NO_WALLET=1 NO_UPNP=1
    fi
    if test $? -eq 0; then
      popd || exit -1
    else
      echo "Bitcoin's dependency building failed, please check the previous output for details."
      exit -1
    fi
  fi
}

get_tag () {
  if test -e "${root_dir/PATCH_VERSION}"; then
    tag=`cat "${root_dir}/PATCH_VERSION" | xargs` || exit -1
  else
    echo "no tag file found, please create it in the root of the project as so: 'echo \"v0.10.2\" > PATCH_VERSION'"
    exit 1
  fi
}

cache_files () {
  cache_file="${root_dir}"/cache/cache.tar
  pushd "${btc_dir}" || exit -1
  find src depends/${host} -type f \( -name "*.h" -or -name "*.hpp" -or -name \
"*.ipp" -or -name "*.a" \) | tar -cf "${cache_file}" -T -
  if test $? -ne 0; then
    echo "We were trying to copy over your cached artifacts, but there was an issue."
    exit -1
  fi
  tar xf "${cache_file}" -C "${root_dir}"/cache
  if test $? -ne 0; then
    echo "We were trying to untar your cache, but there was an issue."
    exit -1
  fi
  rm -fr "${cache_file}" >/dev/null 2>&1
  popd || exit -1
}

debug=
if [ "${BITCORENODE_ENV}" == "debug" ]; then
  options=`cat ${root_dir}/bin/config_options_debug.sh` || exit -1
fi

test=false
if [ "${BITCORENODE_ENV}" == "test" ]; then
  test=true
  options=`cat ${root_dir}/bin/config_options_test.sh` || exit -1
fi

mac_response=$($root_dir/bin/variables.sh mac_dependencies)
if [ "${mac_response}" != "" ]; then
  echo "${mac_response}"
  exit -1
fi

if [ -d "${btc_dir}" ]; then
  echo "A previously cloned libbitcoind directory was found, using this..."
  cd "${btc_dir}" || exit -1
else
  get_tag
  echo "Cloning and building libbitcoind..."
  echo "attempting to checkout tag: ${tag} of BitPay's bitcoin from github..."
  cd "${root_dir}" || exit -1
  #versions of git prior to 2.x will not clone correctly with --branch
  git clone --depth 1 https://github.com/bitpay/bitcoin.git libbitcoind
  cd "${btc_dir}" || exit -1
  git fetch --tags
  git checkout "${tag}"

  if ! test -d .git; then
    echo 'Please point this script to an upstream bitcoin git repo.'
    exit -1
  fi
fi
build_dependencies
echo './autogen.sh'
./autogen.sh || exit -1

config_host="--host ${host}"
full_options="${options} ${config_host} ${config_lib_dir}"
echo "running the configure script with the following options:\n :::[\"${full_options}\"]:::"
${full_options}

echo 'make V=1'
make V=1 || exit -1

cache_files
echo 'Build finished successfully.'


# Building the Bindings

set -e

cd "${root_dir}"

debug=--debug=false
if test x"$1" = x'debug'; then
  debug=--debug
fi

echo "running::: 'node-gyp ${sys} ${debug} rebuild'"
node-gyp ${sys} ${debug} rebuild
